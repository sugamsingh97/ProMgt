@using MudBlazor
@using MudBlazor.Services
@inject ProjectService ProjectService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@using System.Net.Http.Json
@using System.Text.Json

<MudDrawerHeader Class="d-flex pa-4 align-center">
    <MudButton Target="_blank"
               OnClick="@(()=>UpdateTaskCompletion(TaskResponse.Id, TaskResponse.IsCompleted))"
               Class="@(TaskResponse.IsCompleted ? "custom-bg" : "")"
               Variant="Variant.Outlined"
               StartIcon="@Icons.Material.Rounded.Check"
               Color="Color.Primary">
        @(TaskResponse.IsCompleted ? "Completed" : "Mark complete")

    </MudButton>
    <MudSpacer />
    <MudIconButton Class="pa-0" OnClick="@CloseTaskInfoDrawer" Icon="@Icons.Material.Rounded.ChevronRight"></MudIconButton>

</MudDrawerHeader>
<MudDivider />
<MudGrid Class="pa-4" xs="12">
    <MudItem Class="d-flex align-center" xs="8">
        <MudTextField Variant="Variant.Text"
                      OnBlur="()=>UpdateTaskName(TaskResponse.Id, TaskResponse.Name)"
                      Style="font-size: x-large; font-weight: 500"
                      @onmouseover="@(() => IsTitleHover = true)"
                      @onmouseenter="@(() => IsTitleHover = true)"
                      @onmouseout="@(() => IsTitleHover = false)"
                      @onfocus="@(() => IsTitleHover = true)"
                      Underline="@(IsTitleHover ? true : false)"
                      @bind-Value="TaskResponse.Name"></MudTextField>
    </MudItem>
    <MudItem xs="4" Style="font-size: smaller;">
        <MudTooltip Text="Use Ai to summerize the task." Placement="Placement.Top" Arrow="true">

            <MudButton Variant="Variant.Filled"
                       Class="ai-summary-button"
                       StartIcon="@Icons.Material.Sharp.AutoAwesome"
                       Style="color: #ffffff; font-size: smaller; font-weight: 500">
                Get Ai Summery
            </MudButton>
        </MudTooltip>
    </MudItem>

    <MudItem xs="12" Style="font-size: smaller;">
        <MudSimpleTable Class="custom-table" Dense="true" Style="overflow-x: auto;  --mud-elevation-1: 0;">
            <thead>
                <tr>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td Class="lable-key">Created</td>
                    <td>
                        <MudDatePicker Date="TaskResponse.DateOfCreation"
                                       DateFormat="dd MMM yyyy"
                                       Margin="Margin.Dense"
                                       Underline="false"
                                       AdornmentIcon="@Icons.Material.Rounded.CalendarToday"
                                       Adornment="Adornment.Start"
                                       IconSize="Size.Small"
                                       Disabled="true" />
                    </td>
                </tr>
               
                <tr>
                    <td Class="lable-key">Deadline</td>
                    <td>
                        <MudDatePicker @bind-Date="@TaskResponse.DeadLine"
                                       PickerClosed="()=>OnDateChanged(TaskResponse.Id, TaskResponse.DeadLine)"
                                       DateFormat="dd MMM yyyy"
                                       Margin="Margin.Dense"
                                       Underline="false"
                                       AdornmentIcon="@Icons.Material.Rounded.EditCalendar"
                                       Adornment="Adornment.Start"
                                       IconSize="Size.Small" />
                    </td>
                </tr>
                <tr>
                    <td Class="lable-key">Fields</td>
                    <td>
                        <MudStack>
                            <MudPaper Style="background: none;" Class="pt-4 d-flex align-center">
                                <MudText Style="font-size: small;">Priority</MudText><MudMenu FullWidth="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                                    <ActivatorContent>
                                        <MudButton Size="Size.Small">

                                            @if (TaskResponse.PriorityId >= 1)
                                            {
                                                Console.WriteLine("ID is within the valid range.");
                                                foreach (var p in Priorities)
                                                {

                                                    if (p.Id == TaskResponse.PriorityId)
                                                    {
                                                        <MudChip Size="Size.Small"
                                                                 Icon="@Icons.Material.Filled.Circle"
                                                                 IconColor="Color.Default"
                                                                 Color="Color.Default"
                                                                 T="string"
                                                                 Variant="Variant.Text"
                                                                 Style="@($"--mud-palette-default: {p.HexColor}; --text-color: {p.HexColor}; --bg-color: {GetBackgroundColor(p.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                                                            @p.Name
                                                        </MudChip>
                                                    }

                                                }
                                            }
                                            else
                                            {
                                                Console.WriteLine("ID is disqualified in Data Grid.");
                                                <MudChip Size="Size.Small"
                                                         Icon="@Icons.Material.Filled.Update"
                                                         IconColor="Color.Default"
                                                         Color="Color.Default"
                                                         T="string"
                                                         Variant="Variant.Text">
                                                    Add Priority
                                                </MudChip>
                                            }

                                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Title="Favorite" />
                                        </MudButton>
                                    </ActivatorContent>
                                    <ChildContent>
                                        @foreach (var p in Priorities)
                                        {
                                            <MudMenuItem OnClick="()=>UpdateTaskPriorityHandler(TaskId, p.Id)">
                                                <MudChip Size="Size.Small"
                                                         Icon="@Icons.Material.Filled.Circle"
                                                         IconColor="Color.Default"
                                                         Color="Color.Default"
                                                         T="string"
                                                         Variant="Variant.Text"
                                                         Style="@($"--mud-palette-default: {p.HexColor}; --text-color: {p.HexColor}; --bg-color: {GetBackgroundColor(p.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                                                    @p.Name.ToUpper()
                                                </MudChip>
                                            </MudMenuItem>

                                        }
                                    </ChildContent>
                                </MudMenu>
                            </MudPaper>
                            <MudPaper Style="background: none;" Class="pb-4 d-flex align-center">
                                <MudText Style="font-size: small;">Status</MudText><MudMenu AnchorOrigin="Origin.BottomLeft" FullWidth="true" TransformOrigin="Origin.TopLeft">
                                    <ActivatorContent>
                                        <MudButton FullWidth="true" Size="Size.Large">

                                            @if (TaskResponse.TaskStatusId >= 1)
                                            {
                                                Console.WriteLine("ID is within the valid range.");
                                                foreach (var ts in TaskStatuses)
                                                {

                                                    if (ts.Id == TaskResponse.TaskStatusId)
                                                    {
                                                        <MudChip Size="Size.Small"
                                                                 Icon="@Icons.Material.Filled.Circle"
                                                                 IconColor="Color.Default"
                                                                 Color="Color.Default"
                                                                 T="string"
                                                                 Variant="Variant.Text"
                                                                 Style="@($"--mud-palette-default: {ts.HexColor}; --text-color: {ts.HexColor}; --bg-color: {GetBackgroundColor(ts.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                                                            @ts.Name
                                                        </MudChip>
                                                    }

                                                }
                                            }
                                            else
                                            {
                                                Console.WriteLine("ID is disqualified in Data Grid.");
                                                <MudChip Size="Size.Small"
                                                         Icon="@Icons.Material.Filled.Update"
                                                         IconColor="Color.Default"
                                                         Color="Color.Default"
                                                         T="string"
                                                         Variant="Variant.Text">
                                                    Add Status
                                                </MudChip>
                                            }
                                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Title="Favorite" />
                                        </MudButton>
                                    </ActivatorContent>
                                    <ChildContent>
                                        @foreach (var ts in TaskStatuses)
                                        {
                                            <MudMenuItem OnClick="()=>UpdateTaskStatusHandler(TaskId,ts.Id)">
                                                <MudChip Size="Size.Small"
                                                         Icon="@Icons.Material.Filled.Circle"
                                                         IconColor="Color.Default"
                                                         Color="Color.Default"
                                                         T="string"
                                                         Variant="Variant.Text"
                                                         Style="@($"--mud-palette-default: {ts.HexColor}; --text-color: {ts.HexColor}; --bg-color: {GetBackgroundColor(ts.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                                                    @ts.Name.ToUpper()
                                                </MudChip>
                                            </MudMenuItem>

                                        }
                                    </ChildContent>
                                </MudMenu>
                            </MudPaper>
                        </MudStack>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </MudItem>

    <MudItem xs="12" Style="font-size: smaller;">
        <MudTextField Label="Description"
                      Placeholder="Add description..."
                      Lines="3"
                      Variant="Variant.Filled"
                      @onmouseover="@(() => IsDescriptionHover = true)"
                      @onmouseenter="@(() => IsDescriptionHover = true)"
                      @onmouseout="@(() => IsDescriptionHover = false)"
                      @onfocus="@(() => IsDescriptionHover = true)"
                      Underline="@(IsDescriptionHover ? true : false)"
                      @bind-Value="TaskResponse.Description"
                      OnBlur="()=>UpdateTaskDescription(TaskResponse.Id, TaskResponse.Description)"></MudTextField>

    </MudItem>
</MudGrid>

<style>
    .custom-bg {
        background-color: rgba(55, 201, 90, 0.12) !important;
    }

    .lable-key {
        font-size: small;
        font-weight: 400;
    }

    td .mud-popover-cascading-value {
        z-index: 1305 !important;
    }

    .custom-table {
        width: 100%;
        table-layout: fixed;
    }

        .custom-table td:first-child {
            width: 20%;
        }

        .custom-table td:last-child {
            width: 80%;
        }



    .mud-table {
        background: none;
    }

    .ai-summary-button {
        background: linear-gradient(30deg, #6200ff, #a300f7);
        border-radius: 8px;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }

        .ai-summary-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .ai-summary-button ::deep .mud-button-label {
            font-weight: bold;
            color: white;
        }

        .ai-summary-button ::deep .mud-button-icon-start {
            margin-right: 8px;
        }

</style>
@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int TaskId { get; set; }

    public ProjectResponse ProjectResponse = new ProjectResponse();
    public TaskResponse TaskResponse = new TaskResponse();
    public List<PriorityResponse>? Priorities { get; set; } = new();
    public List<TaskStatusResponse>? TaskStatuses { get; set; } = new();


    private bool IsTitleHover { get; set; } = false;
    private bool IsDescriptionHover { get; set; } = false;
    private bool IsSummeryHover { get; set; } = false;


    protected override async Task OnParametersSetAsync()
    {
        await GetProject();
        await GetTask();
        await GetTaskPriorities();
        await GetTaskStatuses();
    }

    #region Fetch methods
    public async Task GetProject()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<ProjectResponse>($"api/project/{ProjectId}");
            ProjectResponse = response ?? new ProjectResponse();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    public async Task GetTask()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<TaskResponse>($"api/task/gettask/{TaskId}");
            TaskResponse = response ?? new TaskResponse();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    /// <summary>
    /// This gets all the priorities by project
    /// </summary>
    /// <returns></returns>
    public async Task GetTaskPriorities()
    {
        try
        {
            if (ProjectId != null)
            {
                var response = await HttpClient.GetFromJsonAsync<List<PriorityResponse>>($"api/field/projectpriority/{ProjectId}");
                Priorities = (response ?? new List<PriorityResponse>())
                                .ToList();

                StateHasChanged();
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    /// <summary>
    /// This gets all the Statuses by project
    /// </summary>
    /// <returns></returns>
    public async Task GetTaskStatuses()
    {
        try
        {
            if (ProjectId != null)
            {
                var response = await HttpClient.GetFromJsonAsync<List<TaskStatusResponse>>($"api/field/projecttaskstatus/{ProjectId}");
                TaskStatuses = (response ?? new List<TaskStatusResponse>())
                                .ToList();

                StateHasChanged();
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }
    #endregion

    private void CloseTaskInfoDrawer()
    {
        ProjectService.CloseTaskInfoDrawer();

    }

    /// <summary>
    /// This converts HexValue to RGB and gives us a color with 20% opacity for MudChip background.
    /// </summary>
    /// <param name="hexColor"></param>
    /// <returns></returns>
    private string GetBackgroundColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || !hexColor.StartsWith("#") || hexColor.Length != 7)
        {
            return "rgba(0, 0, 0, 0.2)"; // Default color if invalid hex
        }

        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);

        return $"rgba({r}, {g}, {b}, 0.2)";
    }

    public async Task UpdateTaskName(int _taskId, string _newName)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/name", new StringContent(JsonSerializer.Serialize(_newName), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task name updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateTaskDescription(int _taskId, string _newDescription)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/description", new StringContent(JsonSerializer.Serialize(_newDescription), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task description updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating project name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    public async Task OnDateChanged(int _taskId, DateTime? newDate)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/deadline", new StringContent(JsonSerializer.Serialize(newDate.Value), System.Text.Encoding.UTF8, "application/json"));


            if (response.IsSuccessStatusCode)
            {

                Snackbar.Add("Task deadline updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error updating project name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }

    }

    public async Task UpdateTaskPriorityHandler(int _taskId, int _priorityId)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/priority", new StringContent(JsonSerializer.Serialize(_priorityId), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task priority updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();

            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task priority", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateTaskStatusHandler(int _taskId, int _statusId)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/taskstatus", new StringContent(JsonSerializer.Serialize(_statusId), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task status updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();

            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task status", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateTaskCompletion(int _taskId, bool _isCompleted)
    {
        bool _newCompletionStatus = !_isCompleted;

        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/status", new StringContent(JsonSerializer.Serialize(_newCompletionStatus), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task status updated successfully", MudBlazor.Severity.Success);
                await RefreshTaskInfo();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task status", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    public async Task RefreshTaskInfo()
    {
        await GetProject();
        await GetTask();
        await GetTaskPriorities();
        await GetTaskStatuses();
        await ProjectService.TaskInfoIsUpdated();

    }
}
