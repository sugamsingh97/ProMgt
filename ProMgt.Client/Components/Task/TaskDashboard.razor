@using MudBlazor
@inject HttpClient HttpClient

@if (!IsDataLoaded)
{
    <TaskDashboardSkeleton />
}
else
{
<MudItem Class="mx-10 mt-6 d-flex flex-column">
    <MudItem Elevation="0">
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl statistics">
                    <MudText>Completed Task</MudText>
                        <MudItem class="py-2"><MudText Class="statistics-text" Typo="Typo.h3">@TaskStats.Complete</MudText> </MudItem>
                        <MudText Typo="Typo.caption">@TaskStats.Complete / @TaskStats.Total </MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl statistics">
                    <MudText>Incomplete Task</MudText>
                        <MudItem class="py-2"><MudText Class="statistics-text" Typo="Typo.h3">@TaskStats.InComplete</MudText></MudItem>
                    <MudText Typo="Typo.caption">@TaskStats.InComplete / @TaskStats.Total</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl statistics">
                    <MudText>Total Task</MudText>
                        <MudItem class="py-2"><MudText Class="statistics-text" Typo="Typo.h3">@TaskStats.Total</MudText></MudItem>
                        <MudText Typo="Typo.caption"> @TaskStats.Total / @TaskStats.Total</MudText>
                </MudPaper>                   
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem Class="mt-6">
        <MudGrid>
            <MudItem xs="12" lg="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-4">
                    <MudItem Class="chart-title pb-8">
                        Tasks by completion status
                    </MudItem>
                   <TaskCompletionStatusChart ProjectId="ProjectId" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" lg="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-4">
                    <MudItem Class="chart-title  pb-8">
                        Tasks by status
                    </MudItem>
                    <TaskTaskStatusChart ProjectId="ProjectId" />
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem Class="mt-6">
        <MudGrid>
            <MudItem xs="12" lg="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-4">
                    <MudITem Class="chart-title pb-8">
                        Tasks by section
                    </MudITem>
                   <TaskSectionChart ProjectId="ProjectId" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" lg="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-4">
                     <MudITem Class="chart-title  pb-8">
                        Tasks by priority
                    </MudITem>
                   <TaskPriorityChart ProjectId="ProjectId" />
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudItem>


@*
<TaskCompletionStatusChart ProjectId="ProjectId" />

<TaskTaskStatusChart ProjectId="ProjectId" />

<TaskSectionChart ProjectId="ProjectId" />

<TaskPriorityChart ProjectId="ProjectId" /> *@

<style>
    .statistics {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .chart-title {
        font-size: medium;
        font-weight: 500;        
    }
</style>
}
@code {
    public bool IsDataLoaded { get; set; } = false;
    private bool firstRender = true;
    public List<TaskResponse> TaskResponses { get; set; } = new();

    StatData TaskStats { get; set; } = new();

    [Parameter]
    public int ProjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
        await Task.Delay(3000); // 3 seconds delay
        IsDataLoaded = true;

        StateHasChanged();
    }

    public async Task GetTasks()
    {
        try
        {

            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/projecttask/{ProjectId}");
            TaskResponses = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();   

            if (TaskResponses.Count > 0)
            {
                TaskStats.Total = TaskResponses.Count;
                TaskStats.Complete = TaskResponses.Where(tr => tr.IsCompleted == true).ToList().Count;
                TaskStats.InComplete = TaskResponses.Where(tr => tr.IsCompleted == false).ToList().Count;
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }       
    }


    public class StatData
    {
        public int Total { get; set; } = 0;
        public int Complete { get; set; } = 0;
        public int InComplete { get; set; } = 0;
    }
}
