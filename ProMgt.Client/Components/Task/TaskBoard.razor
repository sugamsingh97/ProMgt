@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ProjectService ProjectService
@inject IDialogService IDialogService
@inject IJSRuntime JSRuntime

@* <h3>TaskBoard @ProjectId</h3> *@

@* Add this at the top of your file *@
@if (!isLoaded)
{
    <TaskBoardSkeleton />
}
else
{
    <MudDropContainer T="TaskResponse"
                      @ref="_dropContainer"
                      Items="@(TaskResponses ?? new())"
                      ItemsSelector="@((TaskResponse task, string dropzone) => task.SectionId.ToString() == dropzone)"
                      ItemDropped="TaskMoved">
    <ChildContent>
        <MudPaper Elevation="0" Style="display: flex;">
            @foreach (var thissection in Sections)
            {
                <MudPaper Elevation="0" Width="300px" MinHeight="400px" Class="pa-2 ma-2 d-flex flex-column rounded-xl">
                    <MudItem Class="d-flex align-center">
                        <MudTooltip Text="Edit name" Arrow="true" Delay="600">
                            <MudTextField T="string" @bind-Value="thissection.Name" OnBlur="()=>UpdateSectionName(thissection.Id, thissection.Name)" Placeholder="Untitled Section" UnderLine="false"></MudTextField>
                        </MudTooltip>
                        <MudSpacer />
                        <MudTooltip Text="Add Task" Arrow="true" Delay="600">
                            <MudIconButton OnClick="()=>CreateNewTask(thissection.Id)" Icon="@Icons.Material.Rounded.Add"></MudIconButton>
                        </MudTooltip>
                        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                            <MudTooltip Text="@(_disableDelete ? "Can't delete the last Section" : "Delete")" Arrow="true" Delay="600">
                                <MudButton Disabled="@_disableDelete" OnClick="()=>DeleteSection(thissection.Id)" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete">Delete Section</MudButton>
                            </MudTooltip>
                        </MudMenu>
                    </MudItem>
                    <MudDropZone Class="mud-background-gray rounded-xl px-2 " style="min-height: 400px;" T="TaskResponse" Identifier="@thissection.Id.ToString()">

                    </MudDropZone>
                </MudPaper>
            }
            <MudButton OnClick="CreateSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="height: fit-content;" Class="rounded-xl py-2">Add Section</MudButton>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudPaper @onclick="()=>rowClickHandler(context.Id)" Elevation="0" Outlined="true" Class="pa-4 rounded-xl d-flex flex-column my-3 task-item">
            <MudItem Class="d-flex flex-row justify-space-between align-center">
                @* <MudText Style="font-size: larger; font-weight: 300;" Typo="Typo.h5">@context.Name</MudText> *@
                <MudTextField T="string" Style="font-size: larger; font-weight: 300;" @onclick:stopPropagation @bind-Value="context.Name" OnBlur="()=>UpdateTaskName(context.Id, context.Name)" Placeholder="Untitled Task" UnderLine="false"></MudTextField>

                <MudCheckBox @bind-Value="context.IsCompleted"
                             @onclick="()=>UpdateTaskCompletion(context.Id, context.IsCompleted)"
                             Color="@(context.IsCompleted ? Color.Primary : Color.Default)"
                             CheckedIcon="@Icons.Material.Filled.CheckCircle"
                             UncheckedIcon="@Icons.Material.Filled.CheckCircleOutline"></MudCheckBox>
            </MudItem>
            <MudItem Class="d-flex flex-row flex-wrap my-4">
                @if (context.PriorityId > 0)
                {
                    <MudChip Size="Size.Small"
                             Icon="@Icons.Material.Filled.Circle"
                             IconColor="Color.Default"
                             Color="Color.Default"
                             T="string"
                             Variant="Variant.Text"
                             Style="@($"--mud-palette-default: {context.PriorityHexcode}; --text-color: {context.PriorityHexcode}; --bg-color: {GetBackgroundColor(context.PriorityHexcode)}; background-color: var(--bg-color); color: var(--text-color);")">
                        @context.PriorityName.ToUpper()
                    </MudChip>
                }
                @if (context.TaskStatusId > 0)
                {
                    <MudChip Size="Size.Small"
                             Icon="@Icons.Material.Filled.Circle"
                             IconColor="Color.Default"
                             Color="Color.Default"
                             T="string"
                             Variant="Variant.Text"
                             Style="@($"--mud-palette-default: {context.TaskStatusHexcode}; --text-color: {context.TaskStatusHexcode}; --bg-color: {GetBackgroundColor(context.TaskStatusHexcode)}; background-color: var(--bg-color); color: var(--text-color);")">
                        @context.TaskStatusName.ToUpper()
                    </MudChip>
                }
            </MudItem>
            <MudText Style="font-weight: 100;" Typo="Typo.overline">@context.DeadLine?.ToString("dd MMM yyyy")</MudText>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>
<style>
    .task-item {
        cursor: pointer;
    }

        .task-item:active {
            cursor: grabbing;
        }

    :root .mud-draggable-item:not(.mud-draggable-item-dragging) .task-item {
        cursor: pointer;
    }

    :root .mud-draggable-item.mud-draggable-item-dragging .task-item {
        cursor: grabbing;
    }
</style>

}

@code {
    private bool isLoaded { get; set; } = false;
    [Parameter]
    public int ProjectId { get; set; }
    public List<TaskResponse> TaskResponses { get; set; } = new List<TaskResponse>();
    public List<TaskResponse> TasksToUpdate { get; set; } = new List<TaskResponse>();
    public List<SectionResponse> Sections { get; set; } = new List<SectionResponse>();
    public int? SectionIdToDelete { get; set; }
    public int SectionIdDefault { get; set; }

    public bool _disableDelete { get; set; }

    private MudDropContainer<TaskResponse>? _dropContainer = new();
    public SectionInputModel? newSection { get; set; } = new SectionInputModel();

    protected override async Task OnInitializedAsync()
    {
        ProjectService.OnNewTaskAddedChanged += UpdateBoardContent;
        ProjectService.TaskInforUpdated += UpdateBoardContent;
        ProjectService.OnTaskDeleted += UpdateBoardContent;
        await GetGlobalDataPool();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId > 0)
        {
            isLoaded = false;
            await GetGlobalDataPool();
            StateHasChanged();
        }
    }

    public async Task GetTasks()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/projecttask/{ProjectId}");
            TaskResponses = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();
            isLoaded = true;
            _dropContainer.Refresh();
            // ProjectService.OnFieldChanges += UpdateFields;

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    private void rowClickHandler(int taskId)
    {
        ProjectService.OpenTaskInfoDrawer(ProjectId, taskId);
        //PassTaskToDrawer();
        Console.WriteLine(ProjectId);
        Console.WriteLine(taskId);

    }

    public async Task GetSections()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<SectionResponse>>($"api/section/projectsection/{ProjectId}");
            Sections = (response ?? new List<SectionResponse>()).ToList();

            if (Sections.Count <= 1)
            {
                _disableDelete = true;
            }
            // ProjectService.OnFieldChanges += UpdateFields;

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    public async Task TaskMoved(MudItemDropInfo<TaskResponse> dropInfo)
    {
        var taskId = dropInfo.Item.Id;
        var newSectionId = int.Parse(dropInfo.DropzoneIdentifier);

        // Update the task's SectionId
        dropInfo.Item.SectionId = newSectionId;

        // Here you would typically call a method to update the backend
        // UpdateTaskSection(taskId, newSectionId);
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{taskId}/section", new StringContent(JsonSerializer.Serialize(newSectionId), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task category updated successfully", MudBlazor.Severity.Success);

                //await ProjectService.TriggerProjectNameUpdated(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task Category", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the Task Category.", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateSectionName(int _sectionId, string _newName)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/section/{_sectionId}/name", new StringContent(JsonSerializer.Serialize(_newName), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Section name updated successfully", MudBlazor.Severity.Success);
                //await ProjectService.TriggerProjectNameUpdated(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Section not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Section name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the Section name", MudBlazor.Severity.Error);
        }
    }

    private async Task UpdateBoardContent()
    {
        await GetGlobalDataPool();
        await GetSections();
        StateHasChanged();
        _dropContainer.Refresh();

    }

    private async Task GetGlobalDataPool()
    {
        try
        {
            await GetTasks();
            await GetSections();
            isLoaded = true;
            StateHasChanged();
            if (_dropContainer != null)
            {
                _dropContainer.Refresh();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", MudBlazor.Severity.Error);
        }

    }

    public void Dispose()
    {
        if (ProjectService != null)
        {
            ProjectService.OnNewTaskAddedChanged -= UpdateBoardContent;
            ProjectService.TaskInforUpdated -= UpdateBoardContent;
        }
    }


    public async Task CreateSection()
    {

        try
        {
            newSection.Name = "Untitled Section";
            newSection.ProjectId = ProjectId;

            var response = await HttpClient.PostAsJsonAsync<SectionInputModel>
    ("api/section/createsection", newSection);
    if (response.IsSuccessStatusCode)
    {
    Console.WriteLine("New Section Created");
    await UpdateBoardContent();
    }
    else
    {
    Snackbar.Add(response.ReasonPhrase, MudBlazor.Severity.Error);

    }

    }
    catch (HttpRequestException httpEx)
    {
    Snackbar.Add(httpEx.Message, MudBlazor.Severity.Error);

    }
    catch (Exception ex)
    {
    Snackbar.Add(ex.Message, MudBlazor.Severity.Error);

    }
    }

    public async Task CreateNewTask(int _sectionId)
    {

    var options = new DialogOptions
    {
    CloseOnEscapeKey = true,
    CloseButton = true,
    MaxWidth = MaxWidth.Small,
    FullWidth = true
    };

    var DialogResponse = await IDialogService.ShowAsync<AddTaskDialog>
        ("Add task dialog", options);

        var result = await DialogResponse.Result;

        TaskInputModel newTask = new();

        if (result != null && !result.Canceled)
        {

        newTask = result.Data as TaskInputModel ?? new();
        newTask.ProjectId = ProjectId;
        newTask.SectionId = _sectionId;
        }

        try
        {

        var response = await HttpClient.PostAsJsonAsync<TaskInputModel>
            ("/api/task/createtask", newTask);
            if (response.IsSuccessStatusCode)
            {
            Console.WriteLine("New Section Created");
            await UpdateBoardContent();
            }
            else
            {
            Snackbar.Add(response.ReasonPhrase, MudBlazor.Severity.Error);

            }
            }
            catch (HttpRequestException httpEx)
            {
            Snackbar.Add(httpEx.Message, MudBlazor.Severity.Error);

            }
            catch (Exception ex)
            {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);

            }
            }

            // Get Task by Section and Store it in a list
            public async Task GetTasksToUpdate(int _sectionId)
            {
            try
            {
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/tasksection/{_sectionId}");
            TasksToUpdate = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();
            // ProjectService.OnFieldChanges += UpdateFields;

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    //Delete the section
    public async Task DeleteSection(int _sectionId)
    {
        await GetTasksToUpdate(_sectionId);
        await GetDefaultSection(_sectionId);

        await UpdateTaskSection(SectionIdDefault, TasksToUpdate);

        try
        {
            var response = await HttpClient.DeleteAsync($"/api/section/deletesection/{_sectionId}");

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Section deleted successfully!", MudBlazor.Severity.Success);
                await UpdateBoardContent();
                //NavigationManager.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Section not found.", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add($"Error: {response.ReasonPhrase}", MudBlazor.Severity.Error);
            }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Request error: {ex.Message}", MudBlazor.Severity.Error);

        }
        catch (NotSupportedException ex)
        {
            Snackbar.Add($"Content type error: {ex.Message}", MudBlazor.Severity.Error);

        }
        catch (JsonException ex)
        {
            Snackbar.Add($"JSON error: {ex.Message}", MudBlazor.Severity.Error);

        }
    }

    // Get Default Section
    public async Task GetDefaultSection(int _excludeSectionId)
    {

        try
        {
            SectionResponse _defaultSection = new();
            var response = await HttpClient.GetFromJsonAsync<SectionResponse>($"api/section/projectdefaultsection/{ProjectId}?excludeSectionId={_excludeSectionId}");
            _defaultSection = (response ?? new SectionResponse());
            SectionIdDefault = _defaultSection.Id;

            // ProjectService.OnFieldChanges += UpdateFields;

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    // For each Task send a Patch request.
    public async Task UpdateTaskSection(int _newSectionId, List<TaskResponse> _tasks)
    {
        foreach (var task in _tasks)
        {
            try
            {
                var response = await HttpClient.PatchAsync($"api/task/{task.Id}/section", new StringContent(JsonSerializer.Serialize(SectionIdDefault), System.Text.Encoding.UTF8, "application/json"));

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Task section updated successfully", MudBlazor.Severity.Success);
                    //await ProjectService.TriggerProjectNameUpdated(); // Trigger the event
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Snackbar.Add("Task section not found", MudBlazor.Severity.Error);
                }
                else
                {
                    Snackbar.Add("An error occurred while updating the Task section", MudBlazor.Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating Task name: {ex.Message}");
                Snackbar.Add("An error occurred while updating the Task section", MudBlazor.Severity.Error);
            }
        }
    }

    public async Task UpdateTaskName(int _taskId, string _newName)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/name", new StringContent(JsonSerializer.Serialize(_newName), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task name updated successfully", MudBlazor.Severity.Success);
                await ProjectService.TriggerProjectNameUpdated(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the Task name", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateTaskCompletion(int _taskId, bool _isCompleted)
    {
        bool _newCompletionStatus = !_isCompleted;

        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/status", new StringContent(JsonSerializer.Serialize(_newCompletionStatus), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task status updated successfully", MudBlazor.Severity.Success);
                await GetTasks(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task status", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }
    #region Helper functions
    /// <summary>
    /// This converts HexValue to RGB and gives us a color with 20% opacity for MudChip background.
    /// </summary>
    /// <param name="hexColor"></param>
    /// <returns></returns>
    private string GetBackgroundColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || !hexColor.StartsWith("#") || hexColor.Length != 7)
        {
            return "rgba(0, 0, 0, 0.2)"; // Default color if invalid hex
        }

        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);

        return $"rgba({r}, {g}, {b}, 0.2)";
    }
    #endregion
}
