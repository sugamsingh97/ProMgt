@using System.Net.Http.Json
@using System.Text.Json
@using ProMgt.Client.Models.Task
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ProjectService ProjectService
@inject IDialogService IDialogService
@inject IJSRuntime JSRuntime

    <MudChart LegendPosition="Position.Left" ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />

@* <MudText Typo="Typo.h6">Selected status: @(Index >= 0 && Index < labels.Length ? labels[Index] : "None")</MudText>
<MudText Typo="Typo.body1">Number of tasks: @(Index >= 0 && Index < data.Length ? data[Index] : 0)</MudText> *@

@code {
    [Parameter]
    public int ProjectId { get; set; }

    public List<TaskResponse> Tasks { get; set; } = new List<TaskResponse>();

    private int Index = -1;
    private double[] data = Array.Empty<double>();
    private string[] labels = new[] { "Completed", "Not Completed" };

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
        UpdateChartData();
    }

    public async Task GetTasks()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/projecttask/{ProjectId}");
            Tasks = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
            
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
            
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
            
        }
    }

    private void UpdateChartData()
    {
        var completedTasks = Tasks.Count(t => t.IsCompleted);
        var notCompletedTasks = Tasks.Count - completedTasks;

        data = new double[] { completedTasks, notCompletedTasks };
    }
}
