@using System.Net.Http.Json
@using System.Text.Json
@using ProMgt.Client.Models.Task
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ProjectService ProjectService
@inject IDialogService IDialogService
@inject IJSRuntime JSRuntime

    <MudChart LegendPosition="Position.Left" ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>

@* <MudText Typo="Typo.h6">Selected priority: @(Index >= 0 && Index < labels.Length ? labels[Index] : "None")</MudText>
<MudText Typo="Typo.body1">Number of tasks: @(Index >= 0 && Index < data.Length ? data[Index] : 0)</MudText> *@

@code {
    [Parameter]
    public int ProjectId { get; set; }

    public List<TaskResponse> Tasks { get; set; } = new List<TaskResponse>();

    private int Index = -1;
    private double[]? data;
    private string[]? labels;

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
        UpdateChartData();
    }

    public async Task GetTasks()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/projecttask/{ProjectId}");
            Tasks = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
            Snackbar.Add("Failed to fetch tasks. Please try again later.", MudBlazor.Severity.Error);
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
            Snackbar.Add("An error occurred while processing the data.", MudBlazor.Severity.Error);
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
            Snackbar.Add("An error occurred while processing the data.", MudBlazor.Severity.Error);
        }
    }

    private void UpdateChartData()
    {
       var tasksByPriority = Tasks
            .Where(t => t.PriorityId > 0)  // Only include tasks with PriorityId > 0
            .GroupBy(t => new { Id = t.PriorityId ?? 0, Name = t.PriorityName ?? "Unknown" })
            .OrderBy(g => g.Key.Id)
            .ToDictionary(g => g.Key, g => g.Count());

        labels = tasksByPriority.Keys.Select(k => k.Name).ToArray();
        data = tasksByPriority.Values.Select(v => (double)v).ToArray();

        // If there are no tasks with priority, display a message
        if (data.Length == 0)
        {
            labels = new[] { "No tasks with priority" };
            data = new[] { 1.0 };
        }
    }
}
