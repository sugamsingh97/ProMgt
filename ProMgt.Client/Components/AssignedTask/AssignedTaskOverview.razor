@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ProjectService ProjectService
@inject IDialogService IDialogService
@inject IJSRuntime JSRuntime

@if (!IsDataLoaded)
{
    <TaskOverviewSkeleton />
}
else
{
    <MudContainer>
        <MudGrid Justify="Justify.Center" Class="d-flex mt-4 mb-8" style="max-width: 1200px;justify-self: center;">
            <MudItem xs="12" md="4">
                <MudPaper Outlined="true" Class="mud-width-full pa-8 rounded-xl" Style="min-height: 475px;">
                    <MudGrid spacing="2">
                        <MudItem Class="d-flex align-center" xs="2">
                            <MudText Style="font-weight: 400" Typo="Typo.body2">Name</MudText>
                        </MudItem>
                        <MudItem Class="d-flex align-center" xs="5">
                            <MudText Style="font-weight: 600" Typo="Typo.body1" Class="pl-1">@Project?.Name</MudText>
                        </MudItem>                        
                        @if (Project?.ProjectStatusId >= 1 && Project.ProjectStatusId <= 5)
                        {                            
                            <MudItem xs="5">
                                @foreach (var status in ProjectStatuses)
                                {
                                    if (status.Id == Project.ProjectStatusId)
                                    {
                                        <MudChip Size="Size.Small"
                                                 Icon="@Icons.Material.Filled.Circle"
                                                 IconColor="Color.Default"
                                                 Color="Color.Default"
                                                 T="string"
                                                 Variant="Variant.Text"
                                                 Style="@($"--mud-palette-default: {status.HexCode}; --text-color: {status.HexCode}; --bg-color: {GetBackgroundColor(status.HexCode)}; background-color: var(--bg-color); color: var(--text-color);")">
                                            @status.Name
                                        </MudChip>
                                    }
                                }
                            </MudItem>
                        }
                        <MudItem xs="2">
                            <MudText Style="font-weight: 400" Typo="Typo.body2">Due on</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Style="font-weight: 400" Typo="Typo.body2" Class="pl-1">@Project?.DeadLine?.ToString("dd MMM yyyy")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="8">
                <MudPaper Elevation="0" Outlined="true" Class="rounded-xl pa-8">
                    <MudTextField @bind-Value="Project.Description"
                                  AutoGrow
                                  Lines="20"
                                  Label="Description"
                                  Class="rounded-xl"
                                  Disabled="true"
                                  Underline="@_isClicked">
                    </MudTextField>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl" Style="min-height: 474px">
                    <MudItem Class="chart-title pl-8 pt-4 pr-8 pb-2 d-flex flex-row align-center">
                        <MudText>Tasks</MudText>
                    </MudItem>
                    <MudDivider />
                    <MudGrid Class="pa-8">
                        <MudItem xs="6">
                            <MudList T="string">
                                @foreach (var task in TaskResponses.Skip(TaskResponses.Count / 2))
                                {
                                    <MudListItem Style="padding-left: 0; padding-right:0;">
                                        <MudItem Class="d-flex align-center">
                                            <MudTooltip Text="@(task.IsCompleted ? "Mark task incomplete" : "Mark task complete")" Placement="Placement.End" Delay="600" Arrow="true">
                                                <MudCheckBox @bind-Value="task.IsCompleted"
                                                             Color="@(task.IsCompleted ? Color.Primary : Color.Default)"
                                                             @onclick="()=>UpdateTaskCompletion(task.Id, task.IsCompleted)"
                                                             Disabled="false"
                                                             CheckedIcon="@Icons.Material.Filled.CheckCircle"
                                                             UncheckedIcon="@Icons.Material.Filled.CheckCircleOutline">
                                                </MudCheckBox>
                                            </MudTooltip>
                                            <MudText>@task.Name</MudText>
                                        </MudItem>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudItem>

                        <MudItem xs="6">
                            <MudList T="string">
                                @foreach (var task in TaskResponses.Take(TaskResponses.Count / 2))
                                {
                                    <MudListItem Style="padding-left: 0; padding-right:0;">
                                        <MudItem Class="d-flex align-center">
                                            <MudTooltip Text="@(task.IsCompleted ? "Mark task incomplete" : "Mark task complete")" Placement="Placement.End" Delay="600" Arrow="true">
                                                <MudCheckBox @bind-Value="task.IsCompleted"
                                                             Color="@(task.IsCompleted ? Color.Primary : Color.Default)"
                                                             @onclick="()=>UpdateTaskCompletion(task.Id, task.IsCompleted)"
                                                             Disabled="false"
                                                             CheckedIcon="@Icons.Material.Filled.CheckCircle"
                                                             UncheckedIcon="@Icons.Material.Filled.CheckCircleOutline">
                                                </MudCheckBox>
                                            </MudTooltip>
                                            <MudText>@task.Name</MudText>
                                        </MudItem>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-8">
                            <MudItem Class="chart-title pb-8">
                                Tasks by completion status
                            </MudItem>
                            <MudChart LegendPosition="Position.Bottom"
                                      ChartType="ChartType.Donut"
                                      InputData="@TaskData"
                                      @bind-SelectedIndex="Index"
                                      InputLabels="@Tasklabels"
                                      Width="300px"
                                      Height="300px" />
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
@code {

    private Color[] colors = { Color.Info, Color.Success, Color.Warning };
    private Variant[] variants = { Variant.Outlined, Variant.Filled };
    private Random random = new Random();
    public List<ProjectStatusResponse> ProjectStatuses { get; set; } = new();
    private Color GetRandomColor() => colors[random.Next(colors.Length)];
    private Variant GetRandomVariant() => variants[random.Next(variants.Length)];

    public bool IsDataLoaded { get; set; } = false;
    private bool firstRender = true;
    private bool _isClicked { get; set; } = false;

    [Parameter]
    public int ProjectId { get; set; }
    public ProjectResponse? Project { get; set; } = new();
    public string? Description { get; set; } = string.Empty;
    public List<TaskResponse>? TaskResponses { get; set; } = new();
    


    public PieData TaskStat { get; set; } = new();

    private int Index = -1;
    private double[] TaskData = Array.Empty<double>();
    private string[] Tasklabels = new[] { "Completed", "Not Completed" };

    protected override void OnInitialized()
    {
        // Only initialize basic properties here
        IsDataLoaded = false;
    }

    protected async override Task OnInitializedAsync()
    {
        ProjectService.OnTaskDeleted += GetData;
        ProjectService.OnNewTaskAddedChanged += GetData;
        ProjectService.OnNewMemberAdded += GetData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            IsDataLoaded = true;
            StateHasChanged();
        }
    }

    public async Task GetData()
    {
        await GetProject();
        await GetTasks();        
        await GetProjectStatuses();          
        StateHasChanged();
    }

    public async Task GetProject()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<ProjectResponse>($"api/project/{ProjectId}");
            Project = response ?? new ProjectResponse();
            StateHasChanged();

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    public async Task GetTasks()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/assignedtask/{ProjectId}");
            TaskResponses = (response ?? new List<TaskResponse>())
                .OrderByDescending(t => t.DateOfCreation)
                .ToList();
            TaskStat = new PieData(); 
            TaskData = Array.Empty<double>();
            await GetTaskStat(TaskResponses);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    public async Task GetTaskStat(List<TaskResponse> TaskResponses)
    {
        TaskStat.Total += TaskResponses.Count;
        foreach (var task in TaskResponses)
        {
            if (task.IsCompleted)
            {
                TaskStat.Complete += 1;
            }
            else if (!task.IsCompleted)
            {
                TaskStat.InComplete += 1;
            }
        }
        await UpdateProjectChart(TaskStat);

    }

    private async Task UpdateProjectChart(PieData TaskStat)
    {

        var completedProjects = TaskStat.Complete;
        var notCompletedProjects = TaskStat.InComplete;

        TaskData = new double[] { completedProjects, notCompletedProjects };
    }

    public class PieData
    {
        public int Total { get; set; } = 0;
        public int Complete { get; set; } = 0;
        public int InComplete { get; set; } = 0;
    }


    public async Task GetProjectStatuses()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<ProjectStatusResponse>>("api/project/getprojectstatuses");
            ProjectStatuses = (response ?? new List<ProjectStatusResponse>())
                            .ToList();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    private string GetBackgroundColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || !hexColor.StartsWith("#") || hexColor.Length != 7)
        {
            return "rgba(0, 0, 0, 0.2)"; // Default color if invalid hex
        }

        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);

        return $"rgba({r}, {g}, {b}, 0.2)";
    }

    public async Task UpdateTaskCompletion(int _taskId, bool _isCompleted)
    {
        bool _newCompletionStatus = !_isCompleted;

        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/status", new StringContent(JsonSerializer.Serialize(_newCompletionStatus), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
                Snackbar.Add("Task status updated successfully", MudBlazor.Severity.Success);
                await GetData(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
                Snackbar.Add("An error occurred while updating the Task status", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }
}
