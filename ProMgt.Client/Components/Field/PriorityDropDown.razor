@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ProjectService ProjectService

<MudMenu Style="width: 200px;" FullWidth="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
    <ActivatorContent>
        <MudButton Size="Size.Small">

            @if (TaskResponse.PriorityId >= 1)
            {
                Console.WriteLine("ID is within the valid range.");
                foreach (var p in Priorities)
                {

                    if (p.Id == TaskResponse.PriorityId)
                    {
                        <MudChip Size="Size.Small"
                                 Icon="@Icons.Material.Filled.Circle"
                                 IconColor="Color.Default"
                                 Color="Color.Default"
                                 T="string"
                                 Variant="Variant.Text"
                                 Style="@($"--mud-palette-default: {p.HexColor}; --text-color: {p.HexColor}; --bg-color: {GetBackgroundColor(p.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                            @p.Name
                        </MudChip>
                    }

                }
            }
            else
            {
                Console.WriteLine("ID is disqualified in Data Grid.");
                <MudChip Size="Size.Small"
                         Icon="@Icons.Material.Filled.Update"
                         IconColor="Color.Default"
                         Color="Color.Default"
                         T="string"
                         Variant="Variant.Text">
                    Add Priority
                </MudChip>
            }

            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Title="Favorite" />
        </MudButton>
    </ActivatorContent>
    <ChildContent>
        @foreach (var p in Priorities)
        {
            <MudMenuItem OnClick="()=>UpdateTaskPriorityHandler(TaskResponse.Id, p.Id)">
                <MudChip Size="Size.Small"
                         Icon="@Icons.Material.Filled.Circle"
                         IconColor="Color.Default"
                         Color="Color.Default"
                         T="string"
                         Variant="Variant.Text"
                         Style="@($"--mud-palette-default: {p.HexColor}; --text-color: {p.HexColor}; --bg-color: {GetBackgroundColor(p.HexColor)}; background-color: var(--bg-color); color: var(--text-color);")">
                    @p.Name.ToUpper()
                </MudChip>
            </MudMenuItem>

        }
    </ChildContent>
</MudMenu>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int TaskId { get; set; } 

    public TaskResponse TaskResponse { get; set; } = new();
    public List<PriorityResponse>? Priorities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ProjectService.OnNewTaskAddedChanged += UpdateData;
        ProjectService.OnFieldChanges += UpdateData;
    }

    protected override async Task OnParametersSetAsync()
    {
        ProjectService.OnNewTaskAddedChanged += UpdateData;
        await GetTaskPriorities();
        await GetTask();
    }

    public async Task GetTask()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<TaskResponse>($"api/task/gettask/{TaskId}");
            TaskResponse = response ?? new TaskResponse();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    /// <summary>
    /// This gets all the priorities by project
    /// </summary>
    /// <returns></returns>
    public async Task GetTaskPriorities()
    {
        try
        {
            if (ProjectId != null)
            {
                var response = await HttpClient.GetFromJsonAsync<List<PriorityResponse>>($"api/field/projectpriority/{ProjectId}");
                Priorities = (response ?? new List<PriorityResponse>())
                                .ToList();

                StateHasChanged();
            }

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    public async Task UpdateTaskPriorityHandler(int _taskId, int _priorityId)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/task/{_taskId}/priority", new StringContent(JsonSerializer.Serialize(_priorityId), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Task priority updated successfully", MudBlazor.Severity.Success);
                await GetTask();
                await GetTaskPriorities();
                await ProjectService.TaskFieldIsUpdated();
                StateHasChanged();

            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Task not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the Task priority", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Task name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    public async Task UpdateData()
    {
        await GetTaskPriorities();
        await GetTask();
    }
    /// <summary>
    /// This converts HexValue to RGB and gives us a color with 20% opacity for MudChip background.
    /// </summary>
    /// <param name="hexColor"></param>
    /// <returns></returns>
    private string GetBackgroundColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || !hexColor.StartsWith("#") || hexColor.Length != 7)
        {
            return "rgba(0, 0, 0, 0.2)"; // Default color if invalid hex
        }

        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);

        return $"rgba({r}, {g}, {b}, 0.2)";
    }
}
