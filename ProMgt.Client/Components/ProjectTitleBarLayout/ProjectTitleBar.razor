@inject ThemeService ThemeService
@inject ProjectService ProjectService
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using System.Text.Json
@inject ISnackbar Snackbar
@inject IDialogService IDialogService

<MudThemeProvider IsDarkMode="@(ThemeService.CurrentTheme == ProMgtTheme.DarkTheme)" Theme="@ThemeService.CurrentTheme" />
<MudAppBar Color="Color.Tertiary" Fixed="false" Elevation="0"  Class="pt-2">
    <MudGrid Justify="Justify.Center" Class="align-center d-flex" Spacing="2">
        <MudItem Class="d-flex align-center">
            <MudTextField T="string" @bind-Value="Project.Name" OnBlur="UpdateName" Placeholder="Untitled Project" UnderLine="false"></MudTextField>
            <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Icon="@Icons.Material.Filled.ArrowDropDown"
                     AriaLabel="Open user menu">
                <MudMenuItem>Edit info</MudMenuItem>
                <MudMenuItem>Copy project link</MudMenuItem>
                <MudMenuItem>Delete</MudMenuItem>
            </MudMenu>
            <MudMenu FullWidth="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                <ActivatorContent>
                    <MudButton Size="Size.Small">

                        @if (Project.ProjectStatusId >= 1 && Project.ProjectStatusId <= 5)
                        {
                            Console.WriteLine("ID is within the valid range.");
                            foreach (var status in ProjectStatuses)
                            {

                                if (status.Id == Project.ProjectStatusId)
                                {
                                    <MudChip Size="Size.Small"
                                             Icon="@Icons.Material.Filled.Circle"
                                             IconColor="Color.Default"
                                             Color="Color.Default"
                                             T="string"
                                             Variant="Variant.Text"
                                             Style="@($"--mud-palette-default: {status.HexCode}; --text-color: {status.HexCode}; --bg-color: {GetBackgroundColor(status.HexCode)}; background-color: var(--bg-color); color: var(--text-color);")">
                                        @status.Name
                                    </MudChip>
                                }

                            }
                        }
                        else
                        {
                            Console.WriteLine("ID is disqualified.");
                            <MudChip Size="Size.Small"
                                     Icon="@Icons.Material.Filled.Update"
                                     IconColor="Color.Default"
                                     Color="Color.Default"
                                     T="string"
                                     Variant="Variant.Text"                                     >
                                Add Status
                            </MudChip>
                        }
                        
                        <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Title="Favorite" />
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    @foreach (var status in ProjectStatuses)
                    {
                        <MudMenuItem OnClick="()=>UpdateProjectStatusHandler(status.Id)">
                        <MudChip Size="Size.Small"
                                 Icon="@Icons.Material.Filled.Circle"
                                 IconColor="Color.Default"
                                 Color="Color.Default"
                                 T="string"
                                 Variant="Variant.Text"
                                 Style="@($"--mud-palette-default: {status.HexCode}; --text-color: {status.HexCode}; --bg-color: {GetBackgroundColor(status.HexCode)}; background-color: var(--bg-color); color: var(--text-color);")">
                                @status.Name.ToUpper()
                        </MudChip>
                        </MudMenuItem>
                    }                    
                </ChildContent>
            </MudMenu>
        </MudItem>
        <MudSpacer />
        <MudItem Class="d-flex align-center">
            <MudAvatarGroup MaxColor="Color.Primary">
                <MudAvatar Color="Color.Primary">M</MudAvatar>
                <MudAvatar Color="Color.Secondary">U</MudAvatar>
                <MudAvatar Color="Color.Info">D</MudAvatar>
                <MudAvatar Color="Color.Primary">M</MudAvatar>
                <MudAvatar Color="Color.Secondary">U</MudAvatar>
                <MudAvatar Color="Color.Info">D</MudAvatar>
            </MudAvatarGroup>
            <MudItem class="px-2">
                <MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FolderShared" Color="Color.Secondary">Share</MudButton>
            </MudItem>
            <MudItem>
                <MudTooltip Text="Toggle Dark Mode">
                    <MudButton Size="Size.Small" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.GridView" Color="Color.Primary" OnClick="@InfoDrawer">Fields</MudButton>
                </MudTooltip>
            </MudItem>
        </MudItem>
    </MudGrid>
</MudAppBar>
@code {
    [Parameter]
    public int? ProjectId { get; set; }
    public ProjectResponse Project { get; set; } = new();
    public List<ProjectStatusResponse> ProjectStatuses { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        await GetProjectStatuses();
        await GetProject();
        // await GetTasks();
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    public async Task AddProjectStatusHandler()
    {


        // var options = new DialogOptions
        //     {
        //         CloseOnEscapeKey = true,
        //         CloseButton = true,
        //         MaxWidth = MaxWidth.Small,
        //         FullWidth = true
        //     };

        // var dialogResponse = await IDialogService.ShowAsync<EditProjectStatusDialog>("Edit status", options);
        await Task.CompletedTask;
    }

    private void InfoDrawer()
    {
        ProjectService.ToggleDrawer();
    }

    #region Fetching methods
    /// <summary>
    /// This gets the project
    /// </summary>
    /// <returns></returns>
    public async Task GetProject()
    {
        try
        {
            // var response = await HttpClient.GetFromJsonAsync<List<ProjectResponse>>("api/project/getstring");
            // Projects = (response ?? new List<ProjectResponse>())
            //                 .OrderByDescending(p => p.DateOfCreation)
            //                 .ToList();
            // StateHasChanged();

            var response = await HttpClient.GetFromJsonAsync<ProjectResponse>($"api/project/{ProjectId}");
            Project = response ?? new ProjectResponse();

            StateHasChanged();

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    /// <summary>
    /// This gets all the Statuses in a list
    /// </summary>
    /// <returns></returns>
    public async Task GetProjectStatuses()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<ProjectStatusResponse>>("api/project/getprojectstatuses");
            ProjectStatuses = (response ?? new List<ProjectStatusResponse>())
                            .ToList();

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    #endregion

    #region Event Handlers
    /// <summary>
    /// This updates only the project name
    /// </summary>
    /// <returns></returns>
    public async Task UpdateName()
    {

        try
        {
            var response = await HttpClient.PatchAsync($"api/project/{ProjectId}/name", new StringContent(JsonSerializer.Serialize(Project.Name), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Project name updated successfully", MudBlazor.Severity.Success);
                await ProjectService.TriggerProjectNameUpdated(); // Trigger the event
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Project not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating project name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    /// <summary>
    /// This Updates only the ProjectStatusId
    /// </summary>
    /// <param name="_statusId"></param>
    /// <returns></returns>
    public async Task UpdateProjectStatusHandler(int _statusId)
    {
        try
        {
            var response = await HttpClient.PatchAsync($"api/project/{ProjectId}/statusid", new StringContent(JsonSerializer.Serialize(_statusId), System.Text.Encoding.UTF8, "application/json"));

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Project name updated successfully", MudBlazor.Severity.Success);
                await GetProject();
                StateHasChanged();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Project not found", MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating project name: {ex.Message}");
            Snackbar.Add("An error occurred while updating the project name", MudBlazor.Severity.Error);
        }
    }

    #endregion

    #region Helper functions
    /// <summary>
    /// This converts HexValue to RGB and gives us a color with 20% opacity for MudChip background.
    /// </summary>
    /// <param name="hexColor"></param>
    /// <returns></returns>
    private string GetBackgroundColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || !hexColor.StartsWith("#") || hexColor.Length != 7)
        {
            return "rgba(0, 0, 0, 0.2)"; // Default color if invalid hex
        }

        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);

        return $"rgba({r}, {g}, {b}, 0.2)";
    }
    #endregion

}
