@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using System.Text.Json
@using ProMgt.Client.Infrastructure.HelperFunctions

<MudLink OnClick="@(() => GoToProject(Item.Id))" >
    <MudGrid Spacing="0" Class="mb-6 project-item">
        <MudItem xs="12" Style="height: 90px;">
            <MudPaper MaxWidth="100%" Elevation="4" Style="height: 100%;" Class="rounded-tl-lg rounded-tr-lg pj-bg-hover">
                <MudGrid Style="height: 85%;" Spacing="0">
                    <MudItem xs="5" Class="d-flex flex-column align-flex-start justify-space-evenly pa-2 pl-4">
                        <MudText Typo="Typo.h6">
                            @Item.Name
                        </MudText>
                        <MudText Typo="Typo.caption" Style="color: dimgray;">
                            @Item.DateOfCreation.ToIsoDateString()
                        </MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex flex-column align-flex-start justify-space-evenly pa-2" Style="font-weight:500;">
                        <MudText Typo="Typo.body2">
                            2 tasks pending
                        </MudText>
                        <MudText Typo="Typo.caption" Style="font-weight: 600;">
                            6/8 tasks completed
                        </MudText>
                    </MudItem>
                    <MudItem xs="2" Class="d-flex flex-column align-center justify-space-evenly pa-2" Style="font-weight:500;">
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">
                            <MudText Typo="Typo.subtitle2">
                                @days
                            </MudText>
                            &nbsp;
                            <MudText Typo="Typo.caption" Style="font-weight: 600;">
                                days left
                            </MudText>
                        </MudChip>
                    </MudItem>
                    <MudItem xs="1" Class="d-flex flex-column align-center justify-space-evenly pa-2">
                        <MudIcon Class="elipse" Icon="@Icons.Material.Rounded.Circle" Style="@Style" />
                    </MudItem>
                </MudGrid>
                <MudItem xs="12" Style="height: 15%">
                    <MudProgressLinear Style="height:100%;" Color="Color.Success" Size="Size.Large" Value="_progressNumber" />
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudLink>

<style>
    .elipse {
        filter: drop-shadow(0px 0px 9.199999809265137px rgba(255, 152, 0, 0.25));
        border-radius: 50%;
    }

    .project-item:hover {
        cursor: pointer;
        box-shadow: 1px 3px 5px -2px rgba(0,0,0,0.2),0px 5px 6px 0px rgba(0,0,0,0.14),0px 2px 11px 0px rgba(0,0,0,0.12);
    }

    .pj-bg-hover:hover {
        background: rgba(111, 109, 109, 0.15);
    }
</style>

@code {
    [Parameter]
    public ProjectDisplay Item { get; set; } = new();

    public List<TaskResponse> TaskResponse { get; set; }
    public List<TaskDisplay> TasksList { get; set; }

    private string? Style { get; set; }

    public int _progressNumber { get; set; } = 0;
    private int days = 0;

    protected async override Task OnInitializedAsync()
    {
        DateTime currentDate = DateTime.Now;
        TimeSpan? difference = Item.DeadLine - currentDate;
        days = difference!.Value.Days;
        string color = Item.IsCompleted ? Colors.Orange.Default : Colors.LightGreen.Default;
        Style = $"color:{color};";
        await GetTasks();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// This navigates to the project space.
    /// </summary>
    /// <param name="id">Pass the project Id</param>
    private void GoToProject(int id)
    {
        NavigationManager.NavigateTo($"/project/project-space/{id}");
    }

    /// <summary>
    /// This gets tasks.
    /// </summary>
    /// <returns></returns>
    public async Task GetTasks()
    {
        try
        {            
            var response = await HttpClient.GetFromJsonAsync<List<TaskResponse>>($"api/task/projecttask/{Item.Id}");
            TaskResponse = response ?? new List<TaskResponse>();
            TasksList = TaskHelper.ConvertToTaskDisplay(TaskResponse);

            if (TasksList.Count > 0)
            {
                _progressNumber = TaskHelper.GetProgress(TasksList);
                StateHasChanged();
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }   
    
}
