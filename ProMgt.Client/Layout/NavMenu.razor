@implements IDisposable
@using System.Net.Http.Json
@using System.Text.Json
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth
@inject ProjectService ProjectService

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Icon="@Icons.Material.Rounded.ViewList" OnClick="OnExpandCollapseClick">
                <MudItem Class="d-flex" Style="justify-content: space-between;">
                    <MudText style="font-size: revert;">Projects</MudText>
                    <MudIcon Size="@Size.Small" Icon="@(_expanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" />
                </MudItem>
            </MudNavLink>
            <MudCollapse Expanded="_expanded">
                @foreach (var item in Projects)
                {
                    <MudNavLink OnClick="() => NavigateHandler(item.Id)" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Book">
                        <MudText Typo="Typo.caption">
                            @item.Name
                        </MudText>
                    </MudNavLink>
                }
            </MudCollapse>
            

            <MudNavLink Href="#" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <form @onsubmit="HandleSignOut">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            @* <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink> *@
            <MudNavLink Href="signup" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PersonAdd">Sign Up</MudNavLink>
            <MudNavLink Href="signin" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Sign In</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    public bool _expanded = false;
    private bool _isAuthenticated = false;
    private string? currentUrl;
    private string errorMessage = string.Empty; 
    public List<ProjectResponse> ProjectResponse { get; set; } = new();
    public List<ProjectDisplay> Projects { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await Auth.GetAuthenticationStateAsync();
        _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        if (_isAuthenticated)
        {
            await GetProjects();
        }
        ProjectService.OnNewProjectAddedChanged += UpdateProjectList;
        ProjectService.OnProjectNameUpdated += UpdateProjectList; // Add this line

    }

    #region project list collapse
    /// <summary>
    /// This Toggles the Collapse
    /// </summary>
    private void OnExpandCollapseClick()

    {
        _expanded = !_expanded;
    }

    #endregion

    /// <summary>
    /// When Name is updated in ProjectTitleBar. this trigger the async Update on the list
    /// </summary>
    /// <returns></returns>
    private async Task UpdateProjectList()
    {
        await GetProjects();
        StateHasChanged();
    }


    /// <summary>
    /// This navigates to the project space page with project Id.
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task NavigateHandler(int Id)
    {
        await Task.CompletedTask;
        NavigationManager.NavigateTo($"/project-space/{Id}", true);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ProjectService.OnNewProjectAddedChanged -= UpdateProjectList;
        ProjectService.OnProjectNameUpdated -= UpdateProjectList; // Add this line
    }

    private async Task HandleSignOut()
    {
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(NavigationManager.Uri), "returnUrl");
        var response = await HttpClient.PostAsync("api/auth/signout", formData);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<SignOutResult>();
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            Console.Error.WriteLine("Sign-out failed");
            Snackbar.Add("Sign -out failed", MudBlazor.Severity.Error);
        }
    }

    private class SignOutResult
    {
        public string? Message { get; set; }
        public string? ReturnUrl { get; set; }
    } 

    /// <summary>
    /// This Gets all the project.
    /// </summary>
    /// <returns></returns>
    public async Task GetProjects()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<ProjectResponse>>("api/project/getstring");
            ProjectResponse = (response ?? new List<ProjectResponse>())
                            .OrderByDescending(p => p.DateOfCreation)
                            .ToList();
            Projects = ConvertToProjectDisplay(ProjectResponse);
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }
    }

    #region Helper functions
    /// <summary>
    /// This Takes the List<ProjectResponse> and then converts it to List<ProjectDisplay>
    /// </summary>
    /// <param name="projects"></param>
    /// <returns></returns>
    internal List<ProjectDisplay> ConvertToProjectDisplay(List<ProjectResponse> projects)
    {
        List<ProjectDisplay> localList = new List<ProjectDisplay>();
        foreach (var project in projects)
        {
            localList.Add(new()
                {
                    Id = project.Id,
                    Name = project.Name,
                    DeadLine = project.DeadLine,
                    IsCompleted = project.IsCompleted,
                    DateOfCreation = project.DateOfCreation
                });
        }
        return localList;
    }
    #endregion

}


