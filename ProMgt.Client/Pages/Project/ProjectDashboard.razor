@page "/dashboard"
@using System.Net.Http.Json
@using System.Text.Json
@inject ProjectService ProjectService
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


@if (!IsDataLoaded)
{
    <DashboardSkeleton />

}
else
{
    <MudContainer Class="ma-8 pa-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem Class="d-flex justify-end py-4 mr-16" xs="12">
                <MudButton Size="Size.Large" Variant="Variant.Outlined" Color="Color.Primary" onclick="CreateProjectHandler">Create a Project</MudButton>
            </MudItem>
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="d-flex mb-8" style="max-width: 1200px;justify-self: center;">
            <MudItem xs="12" md="12" Class="d-flex flex-column mb-8 align-center justify-center">
                <MudPaper Elevation="0" Class=" d-flex align-center flex-column mb-4" Style="width: fit-content;">
                    <MudText Typo="Typo.h6">@formattedDate</MudText>
                    <MudText Typo="Typo.h4">Welcome to your Dashboard!</MudText>
                </MudPaper>
                <MudPaper Outlined="true" Elevation="0" Class="rounded-xl d-flex flex-row" Style="width: fit-content;">
                    <MudItem Class="ma-4 d-flex flex-column align-center">
                        <MudText Class="statistics-text" Typo="Typo.h6">@ProjectStat.Complete</MudText>
                        <MudItem class="d-flex flex-row">
                            <MudIcon Icon="@Icons.Material.Rounded.DoneOutline" Color="Color.Primary" Size="Size.Small" />
                            <MudText Class="statistics-text pl-2 d-flex flex-row align-center" Typo="Typo.caption">projects completed</MudText>
                        </MudItem>
                    </MudItem>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudItem Class="ma-4 d-flex flex-column align-center">
                        <MudText Class="statistics-text" Typo="Typo.h6">@ProjectStat.InComplete</MudText>
                        <MudItem class="d-flex flex-row">
                            <MudIcon Icon="@Icons.Material.Rounded.ListAlt" Size="Size.Small" />
                            <MudText Class="statistics-text d-flex pl-2 flex-row align-center" Typo="Typo.caption">projects to complete</MudText>
                        </MudItem>
                    </MudItem>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudItem Class="ma-4 d-flex flex-column align-center">
                        <MudText Class="statistics-text" Typo="Typo.h6">@TaskStat.InComplete</MudText>
                        <MudItem class="d-flex flex-row">
                            <MudIcon Icon="@Icons.Material.Rounded.PendingActions" Size="Size.Small" />
                            <MudText Class="statistics-text d-flex pl-2 flex-row align-center" Typo="Typo.caption">tasks to complete</MudText>
                        </MudItem>
                    </MudItem>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-8">
                    <MudItem Class="chart-title pb-8">
                        Projects by completion status
                    </MudItem>
                    <MudChart LegendPosition="Position.Bottom"
                              ChartType="ChartType.Pie"
                              InputData="@projectData"
                              @bind-SelectedIndex="Index"
                              InputLabels="@projectlabels"
                              Width="300px"
                              Height="300px" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-8">
                    <MudItem Class="chart-title pb-8">
                        Tasks by completion status
                    </MudItem>
                    <MudChart LegendPosition="Position.Bottom"
                              ChartType="ChartType.Donut"
                              InputData="@TaskData"
                              @bind-SelectedIndex="Index"
                              InputLabels="@Tasklabels"
                              Width="300px"
                              Height="300px" />
                </MudPaper>
            </MudItem>

        </MudGrid>
        <MudGrid Class="d-flex" style="max-width: 1200px;justify-self: center;">
            <MudItem xs="12" md="6">
                <MudPaper Outlined="true" Class="mud-width-full rounded-xl pa-8">
                    <MudItem Class="chart-title pb-1">
                        Projects
                    </MudItem>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudList T="string">
                                @foreach (var Project in ProjectResponse.Take(ProjectResponse.Count / 2))
                                {
                                    <MudListItem Style="padding-left: 0; padding-right:0;" OnClick="() => NavigateHandler(Project.Id)">
                                        <MudItem Class="d-flex align-center">
                                            <MudTooltip Text="@(Project.IsCompleted ? "Mark project incomplete" : "Mark project complete")" Placement="Placement.End" Delay="600" Arrow="true">
                                                <MudCheckBox @bind-Value="Project.IsCompleted"
                                                             Color="@(Project.IsCompleted ? Color.Primary : Color.Default)"
                                                             Disabled="true"
                                                             CheckedIcon="@Icons.Material.Filled.CheckCircle"
                                                             UncheckedIcon="@Icons.Material.Filled.CheckCircleOutline">
                                                </MudCheckBox>
                                            </MudTooltip>
                                            <MudText>@Project.Name</MudText>
                                        </MudItem>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudItem>

                        <MudItem xs="6">
                            <MudList T="string">
                                @foreach (var Project in ProjectResponse.Skip(ProjectResponse.Count / 2))
                                {
                                    <MudListItem Style="padding-left: 0; padding-right:0;" OnClick="() => NavigateHandler(Project.Id)">
                                        <MudItem Class="d-flex align-center">
                                            <MudTooltip Text="@(Project.IsCompleted ? "Mark project incomplete" : "Mark project complete")" Placement="Placement.End" Delay="600" Arrow="true">
                                                <MudCheckBox @bind-Value="Project.IsCompleted"
                                                             Color="@(Project.IsCompleted ? Color.Primary : Color.Default)"
                                                             Disabled="true"
                                                             CheckedIcon="@Icons.Material.Filled.CheckCircle"
                                                             UncheckedIcon="@Icons.Material.Filled.CheckCircleOutline">
                                                </MudCheckBox>
                                            </MudTooltip>
                                            <MudText>@Project.Name</MudText>
                                        </MudItem>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" md="3">
                <MudButton Style="padding:0;" onclick="CreateProjectHandler">
                    <MudPaper Outlined="true"
                              Class="mud-width-full rounded-xl pa-8 d-flex align-center justify-center flex-column"
                              Style="border-color: var(--mud-palette-primary); width: 100%; height: 100%;">
                        <MudIcon Icon="@Icons.Material.Rounded.Add"
                                 Color="Color.Primary"
                                 Style="font-size: 4rem;" />
                        <MudText Style="color: #37c95a;">Create new project</MudText>
                    </MudPaper>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>

}

<style>
    .statistics {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .mud-container-maxwidth-lg {
        max-width: none !important;
    }

    .mud-container--gutters {
        padding: 0 !important;
    }

    .custom-container {
        max-width: none !important;
        padding: 15px !important;
    }

</style>

@code {
    public bool IsDataLoaded { get; set; } = false;
    private bool firstRender = true;
    private int Index = -1;
    private double[] projectData = Array.Empty<double>();
    private string[] projectlabels = new[] { "Completed", "Not Completed" };

    private double[] TaskData = Array.Empty<double>();
    private string[] Tasklabels = new[] { "Completed", "Not Completed" };

    private string errorMessage = string.Empty;

    public List<ProjectResponse> ProjectResponse { get; set; } = new();
    public List<ProjectDisplay> Projects { get; set; } = new();

    public PieData ProjectStat { get; set; } = new();
    public PieData TaskStat { get; set; } = new();

    public DateTime currentDate { get; set; }

    public string formattedDate { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        // Only initialize basic properties here
        IsDataLoaded = false;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
            IsDataLoaded = true;
            StateHasChanged();
        }
    }

    protected async override Task OnInitializedAsync()
    {
       ProjectService.OnNewProjectAddedChanged += LoadData;
    }

    public async Task LoadData()
    {
        await GetProjects();
        await UpdateProjectChart();
        await UpdateTaskChart();
        await GetDate();
    }

    private async Task GetDate()
    {
        currentDate = DateTime.Now;
        formattedDate = currentDate.ToString("dddd, MMMM dd");
    }

    // Add the logic to open the create project Dialog
    private async Task CreateProjectHandler()
    {
        ProjectService.CreateNewProject();
        await Task.CompletedTask;

    }

    public async Task GetProjects()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<ProjectResponse>>("api/project/getprojectswithtasks");
            ProjectResponse = (response ?? new List<ProjectResponse>())
                            .OrderByDescending(p => p.DateOfCreation)
                            .ToList();
            await GetProjectStat(ProjectResponse);
            await GetTaskStat(ProjectResponse);
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (NotSupportedException ex)
        {
            Console.WriteLine($"Content type error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON error: {ex.Message}");
        }

    }

    public async Task GetProjectStat(List<ProjectResponse> ProjectResponse)
    {

        ProjectStat.Total = ProjectResponse.Count;
        ProjectStat.Complete = ProjectResponse.Where(p => p.IsCompleted == true).ToList().Count;
        ProjectStat.InComplete = ProjectResponse.Where(p => p.IsCompleted == false).ToList().Count;
    }

    public async Task GetTaskStat(List<ProjectResponse> ProjectResponse)
    {

        foreach (var project in ProjectResponse)
        {
            TaskStat.Total += project.Tasks.Count;
            foreach (var task in project.Tasks)
            {
                if (task.IsCompleted)
                {
                    TaskStat.Complete += 1;
                }
                else if (!task.IsCompleted)
                {
                    TaskStat.InComplete += 1;
                }
            }
        }
    }

    private async Task UpdateProjectChart()
    {

        var completedProjects = ProjectStat.Complete;
        var notCompletedProjects = ProjectStat.InComplete;

        projectData = new double[] { completedProjects, notCompletedProjects };
    }

    private async Task UpdateTaskChart()
    {

        var completedTasks = TaskStat.Complete;
        var notCompletedTasks = TaskStat.InComplete;

        TaskData = new double[] { completedTasks, notCompletedTasks };
    }

    public class PieData
    {
        public int Total { get; set; } = 0;
        public int Complete { get; set; } = 0;
        public int InComplete { get; set; } = 0;
    }

    private async Task NavigateHandler(int Id)
    {
        await Task.CompletedTask;
        NavigationManager.NavigateTo($"/project-space/{Id}", true);
    }
}
